1.)
    (a) Find a guest who exists in the database and has not booked a room.

          SELECT guest.firstname, guest.lastname, booking.checked_in
          FROM guest
          FULL OUTER JOIN booking
          ON booking.first_name = guest.firstname
          WHERE booking.checked_in IS NULL;

    (b) Find bookings for a guest who has booked two rooms for the same dates.

        //  SELECT first_name, checked_in
        //  FROM booking
        //  GROUP BY first_name, checked_in
        //  HAVING COUNT(checked_in)>1;

    (c) Find bookings for a guest who has booked one room several times on different dates.

          SELECT b.first_name, b.last_name, b.checked_in, b.checked_out, b.room_number
          FROM booking b
          INNER JOIN (SELECT first_name, last_name, COUNT(*)
                      FROM booking
                      GROUP BY first_name, last_name
                      HAVING COUNT (*) > 1
                      ) dt ON b.first_name=dt.first_name and b.last_name=dt.last_name;

    (d) Count the number of unique guests who have booked the same room.
          SELECT DISTINCT first_name, room_number, COUNT(*)
          FROM booking
          GROUP BY first_name, room_number
          HAVING COUNT(room_number)>1;

2.)
    Design a data model for students and the classes they have taken. The model should include the students' grades for a given class.


        CREATE TABLE students (studentId integer, name text, grade text, classId integer);

        INSERT INTO students (studentId, name, grade, classId) VALUES
             (1, 'Peter Cottontail', 'B', 108),
             (2, 'Murrisa Happy', 'A', 202),
             (3, 'Phillip', 'C', 202),
             (4, 'Terrance', 'F', 108),
             (5, 'Matthew', 'D', 101),
             (6, 'Michael', 'E', 104),
             (7, 'Gary', 'B', 108),
             (8, 'Harrold', 'B', 202),
             (9, 'Ollie', 'A', 101),
             (10, 'Molly', 'C', 108);

         CREATE TABLE classes (classId integer, class_name text, professor text);

         INSERT INTO classes (classId, class_name, professor) VALUES
             (101, 'Physics', 'Mr Hog'),
             (104, 'Biology', 'Ms Mercy'),
             (108, 'Chemistry', 'Mr Reinhardt'),
             (202, 'Computer Science', 'Ms Sombra');


    (a) Work through the questions from the example above:

                    SELECT s.name, c.classid
                    FROM classes c
                    FULL OUTER JOIN students s
                    ON s.classid = c.classid
                    WHERE s.classid IS NULL;

    (d) See link in Submission.

3.)
    (a) Find all students who have taken a particular class:

            SELECT s.name, s.grade, c.class_name
            FROM students s
            FULL OUTER JOIN classes c
            ON s.classid = c.classid
            WHERE c.class_name = 'Computer Science';

    (b) Count the number of each grade (using letter grades A-F) earned in a particular class:

            SELECT grade, classid, COUNT(*)
            FROM students
            GROUP BY grade, classid
            ORDER BY grade;


    (c) Find class names and the total number of students who have taken each class in the list:

            SELECT DISTINCT c.class_name, COUNT(class_name)
            FROM students s
            INNER JOIN classes c ON c.classid = s.classid
            GROUP BY s.classid, class_name
            ORDER BY COUNT DESC;



    (d) Find the class taken by the largest number of students.

            SELECT DISTINCT c.class_name, COUNT(class_name)
            FROM students s
            INNER JOIN classes c ON c.classid = s.classid
            GROUP BY s.classid, class_name
            ORDER BY COUNT DESC
            LIMIT 1;
